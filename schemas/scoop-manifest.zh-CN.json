{
  "$schema": "http://json-schema.org/draft-07/schema",
  "title": "Schema for Scoop manifest",
  "type": "object",
  "required": ["version", "description", "homepage", "license"],
  "$comment": "markdownDescription 字段是 vscode 扩展属性，用于在 vscode 中显示 markdown 格式的描述",
  "dependentRequired": {
    "autoupdate": ["checkver"],
    "checkver": ["autoupdate"]
  },
  "definitions": {
    "bool": {
      "type": "boolean",
      "examples": [true]
    },
    "str": {
      "type": "string",
      "examples": [""],
      "minLength": 1
    },
    "string_or_string_array": {
      "examples": ["", []],
      "type": ["string", "array"],
      "items": {
        "type": "string",
        "minLength": 1
      },
      "minLength": 1,
      "minItems": 1
    },
    "license_field": {
      "enum": [
        "Unknown",
        "Freeware",
        "Proprietary",
        "Public Domain",
        "Shareware"
      ],
      "markdownEnumDescriptions": [
        "使用 `Unknown`，这是 [Scoop 官方定义的字段](https://github.com/ScoopInstaller/Scoop/wiki/App-Manifests#required-properties)，表示无法确定许可证(unable to determine the license)",
        "使用 `Freeware`，这是 [Scoop 官方定义的字段](https://github.com/ScoopInstaller/Scoop/wiki/App-Manifests#required-properties)，表示这是一个免费软件(free to use forever)",
        "使用 `Proprietary`，这是 [Scoop 官方定义的字段](https://github.com/ScoopInstaller/Scoop/wiki/App-Manifests#required-properties)，表示这是一个付费软件(must pay to use)",
        "使用 `Public Domain`，这是 [Scoop 官方定义的字段](https://github.com/ScoopInstaller/Scoop/wiki/App-Manifests#required-properties)，表示这是一个属于公有领域的软件(Public Domain)",
        "使用 `Shareware`，这是 [Scoop 官方定义的字段](https://github.com/ScoopInstaller/Scoop/wiki/App-Manifests#required-properties)，表示这是一个免费试用软件，试用结束后必须付费才能继续使用(free to try, must pay eventually)"
      ]
    },
    "license_identifier": {
      "$comment": "在此处添加已知的许可证，以便验证器可以提供更好的错误信息",
      "enum": [
        "MIT",
        "Unlicense",
        "Apache-2.0",
        "MPL-2.0",
        "GPL-2.0",
        "GPL-3.0-only",
        "AGPL-3.0-only",
        "LGPL-3.0-only",
        "MS-PL",
        "OFL-1.1",
        "EPL-2.0",
        "ISC",
        "BSD-2-Clause",
        "BSD-3-Clause"
      ],
      "markdownEnumDescriptions": [
        "使用 The MIT License ([基于 OSI 标准模板](https://opensource.org/license/MIT))",
        "使用 The Unlicense ([基于 OSI 标准模板](https://opensource.org/licenses/unlicense))",
        "使用 Apache License, Version 2.0 ([基于 OSI 标准模板](https://opensource.org/licenses/Apache-2.0))",
        "使用 Mozilla Public License 2.0 ([基于 OSI 标准模板](https://opensource.org/licenses/MPL-2.0))",
        "使用 GNU General Public License version 2 ([基于 OSI 标准模板](https://opensource.org/licenses/GPL-2.0))",
        "使用 GNU General Public License version 3 ([基于 OSI 标准模板](https://opensource.org/licenses/GPL-3.0))",
        "使用 GNU Affero General Public License version 3 ([基于 OSI 标准模板](https://opensource.org/licenses/AGPL-3.0))",
        "使用 GNU Lesser General Public License version 3 ([基于 OSI 标准模板](https://opensource.org/licenses/LGPL-3.0))",
        "使用 Microsoft Public License ([基于 OSI 标准模板](https://opensource.org/licenses/MS-PL))",
        "使用 SIL Open Font License v1.1 ([基于 OSI 标准模板](https://opensource.org/licenses/OFL-1.1))",
        "使用 Eclipse Public License 2.0 ([基于 OSI 标准模板](https://opensource.org/licenses/EPL-2.0))",
        "使用 ISC License ([基于 OSI 标准模板](https://opensource.org/licenses/ISC))",
        "使用 The 2-Clause BSD License ([基于 OSI 标准模板](https://opensource.org/licenses/BSD-2-Clause))",
        "使用 The 3-Clause BSD License ([基于 OSI 标准模板](https://opensource.org/licenses/BSD-3-Clause))\n- 它也被称为\n   - The BSD 3-Clause \"New\" or \"Revised\" License\n  - The “New BSD License” or “Modified BSD License”"
      ]
    },
    "license": {
      "title": "软件许可证",
      "markdownDescription": "指定软件的许可证或类型字段\n- 如果没有许可证的相关说明和 url 地址，且符合 `Freeware`、`Proprietary`、`Public Domain`、`Shareware`、`Unknown` 之一，必须使用字符串\n- 如果是其他情况，必须使用对象，然后指定 `identifier` 和 `url`，`url` 不是必须的\n- 如果不同的文件具有不同的许可证，请使用逗号 `,` 分隔许可证。如果整个应用程序是双重许可的 ，则使用 `|`\n- https://opensource.org/license\n- https://spdx.org/licenses",
      "description": "指定软件的许可证或类型字段\n- 如果没有许可证的相关说明和 url 地址，且符合 Freeware、Proprietary、Public Domain、Shareware、Unknown 之一，必须使用字符串\n- 如果是其他情况，必须使用对象，然后指定 identifier 和 url，url 不是必须的\n- 如果不同的文件具有不同的许可证，请使用逗号 `,` 分隔许可证。如果整个应用程序是双重许可的 ，则使用 `|`\n- https://opensource.org/license\n- https://spdx.org/licenses",
      "type": ["string", "object"],
      "examples": ["Freeware", {}],
      "oneOf": [
        {
          "type": "string",
          "minLength": 1,
          "$ref": "#/definitions/license_field"
        },
        {
          "type": "object",
          "required": ["identifier"],
          "additionalProperties": false,
          "properties": {
            "identifier": {
              "title": "许可证标识符",
              "markdownDescription": "- 软件的许可证标识符\n- 如果没有许可证的相关说明，且符合 `Freeware`、`Proprietary`、`Public Domain`、`Shareware`、`Unknown` 之一，可以使用它们\n- 如果不同的文件具有不同的许可证，请使用逗号 `,` 分隔许可证。如果整个应用程序是双重许可的 ，则使用 `|`\n- https://opensource.org/license\n- https://spdx.org/licenses",
              "description": "- 软件的许可证标识符\n- 如果没有许可证的相关说明，且符合 Freeware、Proprietary、Public Domain、Shareware、Unknown 之一，可以使用它们\n- 如果不同的文件具有不同的许可证，请使用逗号 `,` 分隔许可证。如果整个应用程序是双重许可的 ，则使用 `|`\n- https://opensource.org/license\n- https://spdx.org/licenses",
              "type": "string",
              "$comment": "这里写 examples 只是为了 vscode 能触发补全菜单，不需要和下方的 enum 对应",
              "examples": ["", "MIT", "Apache-2.0"],
              "anyOf": [
                {
                  "type": "string",
                  "minLength": 1
                },
                {
                  "$ref": "#/definitions/license_field"
                },
                {
                  "$ref": "#/definitions/license_identifier"
                }
              ]
            },
            "url": {
              "type": "string",
              "title": "许可证 URL",
              "markdownDescription": "软件许可证的 URL 地址。",
              "description": "软件许可证的 URL 地址。",
              "pattern": "^https?://",
              "errorMessage": "url 必须是一个有效的 http/https URL"
            }
          }
        }
      ],
      "allOf": [
        {
          "if": {
            "required": ["identifier"]
          },
          "then": {
            "if": {
              "properties": {
                "identifier": {
                  "pattern": "^(Freeware|Proprietary|Public Domain|Shareware|Unknown)$"
                }
              }
            },
            "then": {
              "not": {
                "required": ["identifier"],
                "not": {
                  "required": ["url"]
                }
              },
              "errorMessage": "当 license 使用对象，且 identifier 是 Freeware、Proprietary、Public Domain、Shareware、Unknown 其中一个时，必须提供 url，否则请使用字符串"
            }
          }
        }
      ]
    },
    "notes": {
      "title": "软件提示信息",
      "description": "安装软件之后的英文提示信息。",
      "$ref": "#/definitions/string_or_string_array"
    },
    "url": {
      "title": "软件下载地址",
      "markdownDescription": "- 要下载的文件的 URL\n- 如果有多个 URL，可以使用数组，例如:\n```json\n  \"url\": [\n      \"http://example.com/file1.zip\",\n      \"http://example.com/file2.zip\"\n  ]\n  ```\n- 如果需要更改下载 URL 的文件名，可以在 URL 结尾加上 `#/dl.7z`，例如:\n```json\n  \"url\": \"http://example.org/program.exe#/dl.7z\"\n  ```\n- Scoop 将下载 program.exe ，但将其保存为 dl.7z ，然后将使用 7-Zip 自动提取\n    - 它通常用于 Scoop 清单中，以绕过可能具有不良副作用的可执行安装程序，如注册表更改，放置在安装目录外的文件或管理员提升提示",
      "description": "- 要下载的文件的 URL\n- 如果有多个 URL，可以使用数组\n- 如果需要更改下载 URL 的文件名，可以在 URL 结尾加上 #/dl.7z 这样的字段\n- 如：\"http://example.org/program.exe\" => \"http://example.org/program.exe#/dl.7z\"\n- Scoop 将下载 program.exe ，但将其保存为 dl.7z ，然后将使用 7-Zip 自动提取\n- 此技术通常用于 Scoop 清单中，以绕过可能具有不良副作用的可执行安装程序，如注册表更改，放置在安装目录外的文件或管理员提升提示",
      "examples": ["", []],
      "type": ["string", "array"],
      "minLength": 1,
      "minItems": 1,
      "uniqueItems": true
    },
    "hash": {
      "title": "软件安装包的 hash 值",
      "description": "软件安装包的 hash 值，用于校验下载的软件是否完整",
      "type": ["string", "array"],
      "minLength": 1,
      "minItems": 1,
      "uniqueItems": true,
      "items": {
        "type": "string",
        "pattern": "^([a-fA-F0-9]{64}|(sha1|sha256|sha512|md5):([a-fA-F0-9]{32}|[a-fA-F0-9]{40}|[a-fA-F0-9]{64}|[a-fA-F0-9]{128}))$",
        "errorMessage": "当前的 hash 值格式错误，请参考 https://github.com/ScoopInstaller/Scoop/wiki/App-Manifests#optional-properties"
      },
      "pattern": "^([a-fA-F0-9]{64}|(sha1|sha256|sha512|md5):([a-fA-F0-9]{32}|[a-fA-F0-9]{40}|[a-fA-F0-9]{64}|[a-fA-F0-9]{128}))$",
      "errorMessage": "当前的 hash 值格式错误，请参考 https://github.com/ScoopInstaller/Scoop/wiki/App-Manifests#optional-properties"
    },
    "architecture_property": {
      "examples": [{}],
      "properties": {
        "bin": {
          "$ref": "#/definitions/bin"
        },
        "checkver": {
          "$ref": "#/definitions/checkver"
        },
        "env_add_path": {
          "$comment": "此属性官方规范中未说明，但实际可用",
          "$ref": "#/definitions/env_add_path"
        },
        "extract_dir": {
          "$ref": "#/definitions/extract_dir"
        },
        "hash": {
          "$ref": "#/definitions/hash"
        },
        "installer": {
          "$ref": "#/definitions/installer"
        },
        "pre_install": {
          "$ref": "#/definitions/pre_install"
        },
        "post_install": {
          "$ref": "#/definitions/post_install"
        },
        "shortcuts": {
          "$ref": "#/definitions/shortcuts"
        },
        "uninstaller": {
          "$ref": "#/definitions/uninstaller"
        },
        "url": {
          "$ref": "#/definitions/url"
        }
      },
      "minProperties": 1,
      "additionalProperties": false
    },
    "architecture_examples": {
      "examples": [
        {},
        {
          "64bit": {
            "url": "",
            "hash": ""
          }
        },
        {
          "32bit": {
            "url": "",
            "hash": ""
          }
        },
        {
          "64bit": {
            "url": "",
            "hash": ""
          },
          "32bit": {
            "url": "",
            "hash": ""
          }
        },
        {
          "64bit": {
            "url": "",
            "hash": ""
          },
          "32bit": {
            "url": "",
            "hash": ""
          },
          "arm64": {
            "url": "",
            "hash": ""
          }
        }
      ]
    },
    "architecture": {
      "title": "架构信息",
      "description": "程序的架构信息。\n架构可以用来包装差异。",
      "type": "object",
      "if": {
        "type": "object",
        "anyOf": [
          {
            "required": ["64bit"]
          },
          {
            "required": ["32bit"]
          },
          {
            "required": ["arm64"]
          }
        ]
      },
      "else": {
        "not": true,
        "errorMessage": "architecture 中至少包含 64bit、32bit 或 arm64 其中一个"
      },
      "additionalProperties": false,
      "$ref": "#/definitions/architecture_examples",
      "properties": {
        "64bit": {
          "description": "64位架构",
          "$ref": "#/definitions/architecture_property"
        },
        "32bit": {
          "description": "32位架构",
          "$ref": "#/definitions/architecture_property"
        },
        "arm64": {
          "description": "arm64架构",
          "$ref": "#/definitions/architecture_property"
        }
      }
    },
    "extract_dir": {
      "title": "仅提取指定目录",
      "markdownDescription": "- 如果 url 属性的值指向一个压缩包，Scoop 默认会提取所有内容\n    - 压缩包类型: `.zip`/`.7z`/`.tar`/`.gz`/`.lzma`/`.lzh`\n- 如果存在 `extract_dir` 属性，Scoop 将只提取 `extract_dir` 定义的指定目录",
      "description": "- 如果 url 属性的值指向一个压缩包(.zip/.7z/.tar/.gz/.lzma/.lzh)，Scoop 默认会提取所有内容\n- 如果存在 extract_dir 属性，Scoop 将只提取 extract_dir 定义的指定目录",
      "$ref": "#/definitions/string_or_string_array"
    },
    "extract_to": {
      "title": "提取内容到指定目录",
      "markdownDescription": "- 如果 url 属性的值指向一个压缩包，Scoop 会将所有内容提取到 `extract_to` 定义的指定目录中\n    - 压缩包类型: `.zip`/`.7z`/`.tar`/`.gz`/`.lzma`/`.lzh`",
      "description": "如果 url 属性的值指向一个压缩包(.zip/.7z/.tar/.gz/.lzma/.lzh)，Scoop 会将所有内容提取到 extract_to 定义的指定目录中",
      "$ref": "#/definitions/string_or_string_array"
    },
    "env_add_path": {
      "title": "添加到环境变量 PATH 中的路径",
      "markdownDescription": "- 将指定目录添加到环境变量(当前用户) PATH 中\n- 如果安装时使用了 `--global` 或 `-g` 参数，则会添加到环境变量(系统级) PATH 中",
      "description": "- 添加到环境变量 PATH 中的路径\n- 如果安装时使用了 --global 或 -g 参数，则会添加到环境变量(系统级) PATH 中",
      "type": ["string", "array"],
      "examples": ["", []],
      "minLength": 1,
      "minItems": 1,
      "uniqueItems": true,
      "oneOf": [
        {
          "type": "string",
          "if": {
            "pattern": "\\$dir"
          },
          "then": {
            "not": true,
            "errorMessage": "不能使用 $dir，请用 . 代替"
          }
        },
        {
          "type": "array",
          "items": {
            "type": "string",
            "minLength": 1,
            "if": {
              "pattern": "\\$dir"
            },
            "then": {
              "not": true,
              "errorMessage": "不能使用 $dir，请用 . 代替"
            }
          }
        }
      ]
    },
    "env_set": {
      "title": "设置环境变量",
      "markdownDescription": "- 为用户设置一个或多个环境变量(当前用户)\n- 如果安装时使用了 `--global` 或 `-g` 参数，则会设置到环境变量(系统级) 中",
      "description": "- 为用户设置一个或多个环境变量(当前用户)\n- 如果安装时使用了 `--global` 或 `-g` 参数，则会设置到环境变量(系统级) 中",
      "type": "object",
      "examples": [{}],
      "if": {
        "type": "object"
      },
      "then": {
        "patternProperties": {
          "^.+$": {
            "$ref": "#/definitions/string_or_string_array"
          }
        },
        "minProperties": 1,
        "additionalProperties": false,
        "errorMessage": "不允许属性名为空字符串"
      }
    },
    "psmodule": {
      "title": "安装 PowerShell 模块",
      "description": "作为 PowerShell 模块安装在 ~/scoop/modules 中",
      "type": "object",
      "required": ["name"],
      "examples": [
        {
          "name": ""
        }
      ],
      "properties": {
        "name": {
          "title": "模块名称",
          "description": "模块的名称，它应该与提取目录中的至少一个文件匹配，以便 PowerShell 将其识别为模块",
          "$ref": "#/definitions/str"
        }
      },
      "additionalProperties": false
    },
    "bin": {
      "type": ["string", "array"],
      "items": {
        "type": ["string", "array"],
        "minLength": 1,
        "anyOf": [
          {
            "type": "array",
            "items": {
              "type": "string",
              "minLength": 1
            },
            "allOf": [
              {
                "items": [
                  {
                    "description": "程序名"
                  },
                  {
                    "description": "shim 别名"
                  },
                  {
                    "description": "参数，它是可选的"
                  }
                ]
              },
              {
                "if": {
                  "minItems": 1,
                  "maxItems": 1
                },
                "then": {
                  "not": true,
                  "errorMessage": "缺少第二个必需值: 别名"
                }
              },
              {
                "if": {
                  "maxItems": 0
                },
                "then": {
                  "not": true,
                  "errorMessage": "缺少两个必需值: 程序名、别名"
                }
              }
            ],
            "minItems": 1,
            "maxItems": 3
          },
          {
            "type": "string"
          }
        ]
      },
      "minLength": 1,
      "minItems": 1,
      "uniqueItems": true,
      "examples": ["", [], [[]]],
      "title": "一个程序(可执行文件或脚本)的字符串或字符串数组",
      "markdownDescription": "- 一个程序(可执行文件或脚本)的字符串或字符串数组，可在用户路径上使用\n- 可以通过一个二维数组来创建一个别名 shim，它使用与真实的可执行文件不同的名称，并(可选地)将参数传递给可执行文件\n- 二维数组应该包含最多三个字符串：程序名,别名,参数(可选)\n- 示例 1: Scoop 会创建一个名为 `a` 的 shim，后续可以直接使用 `a` 命令去运行 a.exe\n```json\n  \"bin\": \"a.exe\"\n  ```\n- 示例 2: 和示例 1 的效果差不多，只是 Scoop 会创建两个 shim，分别是 `a` 和 `b`\n```json\n  \"bin\": [\"a.exe\", \"b.exe\"]\n  ```\n- 示例 3: 和示例 2 的效果差不多，只是创建的两个 shim 的名称变成了 `ax` 和 `bx`\n```json\n  \"bin\": [\n    [\"a.exe\", \"ax\"], \n    [\"b.exe\", \"bx\"]\n  ]\n  ```\n- 示例 4: 和示例 3 的效果差不多，只是当运行它们时，会携带上 `--config $dir/config.json` 参数\n```json\n  \"bin\": [\n    [\"a.exe\", \"ax\", \"--config $dir/config.json\"], \n    [\"b.exe\", \"bx\", \"--config $dir/config.json\"]\n  ]\n  ```",
      "description": "一个程序(可执行文件或脚本)的字符串或字符串数组，可在用户路径上使用。\n可以通过一个二维数组来创建一个别名 shim，它使用与真实的可执行文件不同的名称，并(可选地)将参数传递给可执行文件。\n二维数组应该包含最多三个字符串：程序名,别名,参数(可选)"
    },
    "shortcuts": {
      "type": "array",
      "title": "添加到开始菜单的快捷方式",
      "markdownDescription": "- 指定添加到开始菜单的快捷方式，它们会被放在 `Scoop Apps` 目录中\n- 每个数组中可以包含四个值\n    1. 必需值: 目标文件的路径\n    2. 必需值: 快捷方式的名称，支持子目录: `aaa\\bbb`\n    3. 可选值: 启动参数\n    4. 可选值: 图标文件的路径",
      "description": "- 指定添加到开始菜单的快捷方式，它们会被放在 Scoop Apps 目录中\n- 每个数组中可以包含四个值\n1. 必需值: 目标文件的路径\n2. 必需值: 快捷方式的名称，支持子目录: `aaa\\bbb`\n3. 可选值: 启动参数\n4. 可选值: 图标文件的路径",
      "examples": [[[]]],
      "items": {
        "type": "array",
        "items": {
          "type": "string",
          "minLength": 1,
          "examples": [""]
        },
        "allOf": [
          {
            "items": [
              {
                "description": "目标文件的路径"
              },
              {
                "description": "快捷方式的名称，支持子目录: `aaa\\bbb`",
                "markdownDescription": "快捷方式的名称，支持子目录: `aaa\\bbb`"
              },
              {
                "description": "启动参数，它是可选的"
              },
              {
                "description": "图标文件的路径，它是可选的"
              }
            ]
          },
          {
            "if": {
              "minItems": 1,
              "maxItems": 1
            },
            "then": {
              "not": true,
              "errorMessage": "缺少第二个必需值: 快捷方式名称"
            }
          },
          {
            "if": {
              "maxItems": 0
            },
            "then": {
              "not": true,
              "errorMessage": "缺少两个必需值: 目标文件路径、快捷方式名称"
            }
          }
        ],
        "minItems": 1,
        "maxItems": 4
      },
      "minItems": 1,
      "uniqueItems": true
    },
    "persist": {
      "title": "持久化数据",
      "markdownDescription": "- Scoop 将对指定的目录和文件进行数据持久化\n- 需要注意: Scoop 默认会进行目录链接，如果你希望进行文件链接，你需要先在安装脚本中创建此文件\n- 示例 1: Scoop 会进行目录链接: `$dir\\data` => `$persist_dir\\data`\n```json\n  \"persist\": \"data\"\n  ```\n- 示例 2: 和示例 1 的效果差不多，只是 Scoop 会进行多次链接\n```json\n  \"persist\": [\"data\", \"config.json\"]\n  ```\n- 示例 3: 和示例 2 的效果差不多，只是额外指定了目标位置\n```json\n  \"persist\": [\n    [\"data\", \"userData\"], \n    [\"config.json\", \"myApp/config.json\"]\n  ]\n  ```",
      "type": ["string", "array"],
      "items": {
        "type": ["string", "array"],
        "minLength": 1,
        "anyOf": [
          {
            "type": "array",
            "items": {
              "type": "string",
              "minLength": 1
            },
            "allOf": [
              {
                "if": {
                  "minItems": 1,
                  "maxItems": 1
                },
                "then": {
                  "not": true,
                  "errorMessage": "缺少第二个必需值: persist 的目标位置"
                }
              },
              {
                "if": {
                  "maxItems": 0
                },
                "then": {
                  "not": true,
                  "errorMessage": "缺少两个必需值: 需要 persist 的原始文件或目录、persist 的目标位置"
                }
              }
            ],
            "minItems": 1,
            "maxItems": 3
          },
          {
            "type": "string"
          }
        ]
      },
      "minLength": 1,
      "minItems": 1,
      "uniqueItems": true,
      "examples": ["", [], [[]]]
    },
    "pre_install": {
      "title": "预安装脚本",
      "markdownDescription": "- 用于在安装应用程序之前执行命令\n- 执行顺序: `pre_install` -> `installer` -> `post_install`\n- 可以使用的函数:\n    - appdir: 参考另一个独家应用程序。\n例如，要检查是否安装了另一个应用程序，可以使用 \"if (Test-Path \"$(appdir otherapp)\\current\\otherapp.exe\") { ... }\"\n- 可以使用的变量：\n    - $app: 应用程序名称(应用清单名称)\n    - $architecture: 所安装应用程序的 CPU 架构，如 64bit/32bit/arm64\n    - $cmd: 当前正在运行的子命令，如 uninstall/update/install\n    - $fname: 下载的文件名(可能是多个文件，需要当做数组处理，除非你确定 url 不是数组)\n    - $global: 如果值为$true，则全局安装\n    - $manifest: 反序列化清单(PowerShell 对象)，如 @{version=1.2.3; description=xxx;...}\n    - $version: 正在安装的版本，如 1.2.3\n    - $dir: 应用程序安装目录(实际版本号目录)\n    - $persist_dir: 数据持久化目录\n    - $bucketsdir: Scoop buckets 目录，如 D:\\scoop\\buckets\n    - $bucket: 当前安装应用所属于的 bucket 名称\n    - $cachedir: Scoop cache 目录\n    - $configFile: Scoop 配置的路径\n    - $globaldir: 全局安装目录\n    - $modulesdir: Scoop modules 目录\n    - $original_dir: 应用程序安装目录(实际版本号目录)\n    - $scoopdir: Scoop 所在目录",
      "$ref": "#/definitions/string_or_string_array"
    },
    "installer": {
      "title": "安装程序配置",
      "markdownDescription": "- 运行非 MSI 安装程序的配置\n- 在 scoop install 和 scoop update 期间调用\n- 执行顺序: `pre_install` -> `installer` -> `post_install`",
      "type": "object",
      "minProperties": 1,
      "additionalProperties": false,
      "examples": [{}],
      "properties": {
        "file": {
          "markdownDescription": "- 安装程序可执行文件\n- 对于 installer，默认为最后下载的 URL\n- 如果指定了它， uninstaller 中也需要指定",
          "$ref": "#/definitions/str"
        },
        "script": {
          "markdownDescription": "- 作为安装程序而不是 file 执行\n- 脚本中可用的变量: \n    - $fname: 下载的文件(可能是多个文件，需要当做数组处理，除非你确定 url 不是数组)\n    - $manifest: 已验证的清单引用\n    - $architecture: 64bit/32bit/arm64\n    - $dir: 安装目录",
          "$ref": "#/definitions/string_or_string_array"
        },
        "args": {
          "type": "array",
          "markdownDescription": "- 传递给安装程序的参数数组\n- 它是一个可选的属性",
          "items": {
            "$ref": "#/definitions/str"
          },
          "minItems": 1
        },
        "keep": {
          "markdownDescription": "- 如果安装程序在运行后应该保留(例如，用于将来的卸载)，则设置为 true\n- 如果忽略或设置为任何其他值，安装程序将在运行后被删除",
          "$ref": "#/definitions/bool"
        }
      }
    },
    "post_install": {
      "title": "后安装脚本",
      "markdownDescription": "- 用于在安装应用程序之后执行命令\n- 执行顺序: `pre_install` -> `installer` -> `post_install`\n- 需要注意，此时 Scoop 已经完成 persist，因此如果需要创建文件用于 persist，需要在这之前(pre_install 中) \n- 可以使用的函数:\n    - appdir: 参考另一个独家应用程序。\n例如，要检查是否安装了另一个应用程序，可以使用 \"if (Test-Path \"$(appdir otherapp)\\current\\otherapp.exe\") { ... }\"\n- 可以使用的变量：\n    - $app: 应用程序名称(应用清单名称)\n    - $architecture: 所安装应用程序的 CPU 架构，如 64bit/32bit/arm64\n    - $cmd: 当前正在运行的子命令，如 uninstall/update/install\n    - $fname: 下载的文件名(可能是多个文件，需要当做数组处理，除非你确定 url 不是数组)\n    - $cfg: Scoop 配置(PowerShell 对象)，如 {SCOOP_BRANCH, SCOOP_REPO}\n    - $global: 如果值为$true，则全局安装\n    - $manifest: 反序列化清单(PowerShell 对象)，如 @{version=1.2.3; description=xxx;...}\n    - $version: 正在安装的版本，如 1.2.3\n    - $dir: 应用程序安装目录(current 目录)\n    - $persist_dir: 数据持久化目录\n    - $bucketsdir: Scoop buckets 目录，如 D:\\scoop\\buckets\n    - $bucket: 当前安装应用所属于的 bucket 名称\n    - $cachedir: Scoop cache 目录\n    - $configFile: Scoop 配置的路径\n    - $globaldir: 全局安装目录\n    - $modulesdir: Scoop modules 目录\n    - $original_dir: 应用程序安装目录(实际版本号目录)\n    - $scoopdir: Scoop 所在目录",
      "$ref": "#/definitions/string_or_string_array"
    },
    "pre_uninstall": {
      "title": "预卸载脚本",
      "markdownDescription": "- 用于在卸载应用程序之前执行命令\n- 执行顺序: `pre_uninstall` -> `uninstaller` -> `post_uninstall`\n- 可以使用的函数:\n    - appdir: 参考另一个独家应用程序。\n例如，要检查是否安装了另一个应用程序，可以使用 \"if (Test-Path \"$(appdir otherapp)\\current\\otherapp.exe\") { ... }\"\n- 可以使用的变量：\n    - $app: 应用程序名称(应用清单名称)\n    - $architecture: 所安装应用程序的 CPU 架构，如 64bit/32bit/arm64\n    - $cmd: 当前正在运行的子命令，如 uninstall/update/install\n    - $global: 如果值为$true，则全局安装\n    - $manifest: 反序列化清单(PowerShell 对象)，如 @{version=1.2.3; description=xxx;...}\n    - $version: 正在安装的版本，如 1.2.3\n    - $dir: 应用程序安装目录(实际版本号目录)\n    - $persist_dir: 数据持久化目录\n    - $bucketsdir: Scoop buckets 目录，如 D:\\scoop\\buckets\n    - $bucket: 当前安装应用所属于的 bucket 名称\n    - $cachedir: Scoop cache 目录\n    - $configFile: Scoop 配置的路径\n    - $globaldir: 全局安装目录\n    - $modulesdir: Scoop modules 目录\n    - $original_dir: 应用程序安装目录(实际版本号目录)\n    - $scoopdir: Scoop 所在目录",
      "$ref": "#/definitions/string_or_string_array"
    },
    "uninstaller": {
      "title": "卸载程序配置",
      "markdownDescription": "- 运行非 MSI 卸载程序的配置\n- 在 scoop uninstall 和 scoop update 期间调用\n- 执行顺序: `pre_uninstall` -> `uninstaller` -> `post_uninstall`",
      "type": "object",
      "minProperties": 1,
      "additionalProperties": false,
      "examples": [{}],
      "properties": {
        "file": {
          "description": "卸载程序可执行文件",
          "$ref": "#/definitions/str"
        },
        "script": {
          "markdownDescription": "- 作为卸载程序而不是 file 执行\n- 脚本中可用的变量: \n    - $fname: 下载的文件(可能是多个文件，需要当做数组处理，除非你确定 url 不是数组)\n    - $manifest: 已验证的清单引用\n    - $architecture: 64bit/32bit/arm64\n    - $dir: 安装目录",
          "$ref": "#/definitions/string_or_string_array"
        },
        "args": {
          "type": "array",
          "markdownDescription": "- 传递给卸载程序的参数数组\n- 它是一个可选的属性",
          "items": {
            "$ref": "#/definitions/str"
          },
          "minItems": 1
        }
      }
    },
    "post_uninstall": {
      "title": "后卸载脚本",
      "markdownDescription": "- 用于在卸载应用程序之后执行命令\n- 执行顺序: `pre_uninstall` -> `uninstaller` -> `post_uninstall`\n- 可以使用的函数:\n    - appdir: 参考另一个独家应用程序。\n例如，要检查是否安装了另一个应用程序，可以使用 \"if (Test-Path \"$(appdir otherapp)\\current\\otherapp.exe\") { ... }\"\n- 可以使用的变量：\n    - $app: 应用程序名称(应用清单名称)\n    - $architecture: 所安装应用程序的 CPU 架构，如 64bit/32bit/arm64\n    - $cmd: 当前正在运行的子命令，如 uninstall/update/install\n    - $cfg: Scoop 配置(PowerShell 对象)，如 {SCOOP_BRANCH, SCOOP_REPO}\n    - $global: 如果值为$true，则全局安装\n    - $manifest: 反序列化清单(PowerShell 对象)，如 @{version=1.2.3; description=xxx;...}\n    - $version: 正在安装的版本，如 1.2.3\n    - $dir: 应用程序安装目录(实际版本号目录)\n    - $persist_dir: 数据持久化目录\n    - $bucketsdir: Scoop buckets 目录，如 D:\\scoop\\buckets\n    - $bucket: 当前安装应用所属于的 bucket 名称\n    - $cachedir: Scoop cache 目录\n    - $configFile: Scoop 配置的路径\n    - $globaldir: 全局安装目录\n    - $modulesdir: Scoop modules 目录\n    - $original_dir: 应用程序安装目录(实际版本号目录)\n    - $scoopdir: Scoop 所在目录",
      "$ref": "#/definitions/string_or_string_array"
    },
    "checkver": {
      "title": "版本检查配置",
      "markdownDescription": "- 应用维护者和开发者可以使用 bin/checkver 工具来检查应用的更新版本\n- 字符串：在主页上查找版本的 RegEx\n- 对象：更丰富的配置",
      "type": ["string", "object"],
      "examples": ["", "github", {}],
      "oneOf": [
        {
          "type": "object",
          "additionalProperties": false,
          "properties": {
            "url": {
              "description": "版本所在页面",
              "$ref": "#/definitions/str"
            },
            "github": {
              "description": "应用的 github 仓库地址",
              "$ref": "#/definitions/str",
              "if": {
                "type": "string"
              },
              "then": {
                "minLength": 1,
                "pattern": "^https?://github\\.com/[^/]+/[^/]+/?$",
                "not": {
                  "pattern": "\\.git(\\/|$)"
                },
                "errorMessage": "github 仓库地址格式错误，请使用正确格式，如: https://github.com/abgox/abyss"
              }
            },
            "re": {
              "description": "re 是 regex 的别名\n查找版本的 RegEx(正则表达式)",
              "$ref": "#/definitions/str"
            },
            "regex": {
              "description": "查找版本的 RegEx(正则表达式)",
              "$ref": "#/definitions/str"
            },
            "jsonpath": {
              "description": "使用带有 JSONPath 表达式的 JSON 端点检索版本，可以使用点标注或括号标注。",
              "$ref": "#/definitions/str"
            },
            "jp": {
              "description": "jp 是 jsonpath 的别名\n使用带有 JSONPath 表达式的 JSON 端点检索版本，可以使用点标注或括号标注。",
              "$ref": "#/definitions/str"
            },
            "xpath": {
              "description": "查找版本的 XPath 表达式",
              "$ref": "#/definitions/str"
            },
            "reverse": {
              "description": "如果设置为 true, 则匹配最后一次出现(默认为匹配第一次出现)",
              "$ref": "#/definitions/bool"
            },
            "replace": {
              "description": "用计算值替换匹配值",
              "$ref": "#/definitions/str"
            },
            "useragent": {
              "description": "用于获取网页内容的 User-Agent",
              "$ref": "#/definitions/str"
            },
            "script": {
              "description": "可包含 PowerShell 命令的字符串或字符串数组，用于跟踪多个链接",
              "$ref": "#/definitions/string_or_string_array"
            },
            "sourceforge": {
              "description": "SourceForge 项目的版本检查配置",
              "$ref": "#/definitions/str"
            }
          },
          "minProperties": 1
        },
        {
          "type": "string",
          "anyOf": [
            {
              "type": "string"
            },
            {
              "enum": ["github"],
              "markdownEnumDescriptions": [
                "如果 homepage 是 github 仓库主页，就可以直接使用 \"github\" 字符串作为 checkver 配置"
              ]
            }
          ]
        }
      ]
    },
    "autoupdate_architecture": {
      "required": ["url"],
      "properties": {
        "bin": {
          "$ref": "#/definitions/bin"
        },
        "checkver": {
          "$ref": "#/definitions/checkver"
        },
        "env_add_path": {
          "$comment": "此属性官方规范中未说明，但实际可用",
          "$ref": "#/definitions/env_add_path"
        },
        "extract_dir": {
          "$ref": "#/definitions/extract_dir"
        },
        "hash": {
          "$ref": "#/definitions/autoupdate_hash"
        },
        "installer": {
          "$ref": "#/definitions/installer"
        },
        "pre_install": {
          "$ref": "#/definitions/pre_install"
        },
        "post_install": {
          "$ref": "#/definitions/post_install"
        },
        "shortcuts": {
          "$ref": "#/definitions/shortcuts"
        },
        "uninstaller": {
          "$ref": "#/definitions/uninstaller"
        },
        "url": {
          "$ref": "#/definitions/url"
        }
      },
      "minProperties": 1,
      "additionalProperties": false
    },
    "autoupdate_hash": {
      "description": "定义 hash 的获取",
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "url": {
          "description": "用于下载RDF/JSON文件或提取 hash 的URL模板",
          "$ref": "#/definitions/str"
        },
        "regex": {
          "description": "别名：find\nRegEx表达式来提取 hash",
          "$ref": "#/definitions/str"
        },
        "find": {
          "description": "别名：regex\nRegEx表达式来提取 hash",
          "$ref": "#/definitions/str"
        },
        "mode": {
          "title": "获取 hash 的模式",
          "enum": [
            "github",
            "extract",
            "json",
            "xpath",
            "rdf",
            "metalink",
            "fosshub",
            "sourceforge",
            "download"
          ],
          "markdownEnumDescriptions": [
            "获取 Github 自动生成的 hash，详情查看 [Github blog](https://github.blog/changelog/2025-06-03-releases-now-expose-digests-for-release-assets/)",
            "通过 RegEx 从纯文本文件或网页中提取(默认，可省略)",
            "通过 JSONPath 从 JSON 文件中提取",
            "通过 XML 文件提取",
            "从 RDF 文件中提取",
            "从 Metalink 的头文件或 .meta4 文件中提取",
            "为 FossHub 预定义",
            "为 SourceForge 预定义",
            "下载应用程序文件并在本地对其进行散列(回退)"
          ]
        },
        "jp": {
          "description": "别名：jsonpath\nJSONPath表达式提取 hash",
          "$ref": "#/definitions/str"
        },
        "jsonpath": {
          "description": "别名：jp\nJSONPath表达式提取 hash",
          "$ref": "#/definitions/str"
        },
        "xpath": {
          "description": "XPath表达式来提取 hash 值",
          "$ref": "#/definitions/str"
        }
      }
    }
  },
  "properties": {
    "##": {
      "title": "注释",
      "description": "给此清单的读者或维护者的注释。",
      "$ref": "#/definitions/string_or_string_array"
    },
    "version": {
      "title": "软件版本",
      "description": "此应用清单安装的应用程序的版本",
      "type": "string",
      "examples": ["", "0.0.0"],
      "anyOf": [
        {
          "minLength": 1
        },
        {
          "enum": ["0.0.0"],
          "markdownEnumDescriptions": ["当前版本为 0.0.0"]
        }
      ]
    },
    "description": {
      "title": "软件描述",
      "markdownDescription": "软件的简短描述",
      "description": "软件的简短描述",
      "type": "string",
      "minLength": 1
    },
    "homepage": {
      "title": "软件主页",
      "markdownDescription": "软件的主页或仓库地址",
      "description": "软件的主页或仓库地址",
      "type": "string",
      "pattern": "^https?://",
      "errorMessage": "homepage 必须是一个有效的 http/https URL",
      "$comment": "在 Scoop 的应用清单版本检查中，官网根域名以 '/' 结尾，可以避免一些访问错误",
      "if": {
        "pattern": "^https?://[^/]+$"
      },
      "then": {
        "not": true,
        "errorMessage": "如果是官网根域名，请以 '/' 结尾"
      }
    },
    "license": {
      "$ref": "#/definitions/license"
    },
    "depends": {
      "title": "依赖项",
      "markdownDescription": "- 应用程序的必要依赖项\n- 未安装的依赖项将在应用程序安装前自动安装\n- 如果依赖项是可选的，请使用 `suggest` 属性",
      "description": "- 应用程序的必要依赖项\n- 未安装的依赖项将在应用程序安装前自动安装\n- 如果依赖项是可选的，请使用 suggest",
      "$ref": "#/definitions/string_or_string_array"
    },
    "suggest": {
      "title": "建议的依赖项",
      "markdownDescription": "- 显示一条消息，建议提供补充功能的可选应用程序\n- 如果已经安装了针对该功能建议的任何应用程序，则该功能将被视为“已实现”，用户不会看到任何建议",
      "description": "- 显示一条消息，建议提供补充功能的可选应用程序\n- 如果已经安装了针对该功能建议的任何应用程序，则该功能将被视为“已实现”，用户不会看到任何建议",
      "type": "object",
      "if": {
        "type": "object"
      },
      "then": {
        "patternProperties": {
          "^.+$": {
            "markdownDescription": "- 当指定的建议已经安装，则不会显示该建议。\n- 如果是一个数组，它表示只要数组中任意一个建议被安装，则不会显示该建议",
            "$ref": "#/definitions/string_or_string_array"
          }
        },
        "minProperties": 1,
        "additionalProperties": false,
        "errorMessage": "不允许属性名为空字符串"
      }
    },
    "notes": {
      "$ref": "#/definitions/notes"
    },
    "notes-cn": {
      "$ref": "#/definitions/notes-cn"
    },
    "url": {
      "$ref": "#/definitions/url"
    },
    "hash": {
      "$ref": "#/definitions/hash"
    },
    "architecture": {
      "$ref": "#/definitions/architecture"
    },
    "extract_dir": {
      "$ref": "#/definitions/extract_dir"
    },
    "extract_to": {
      "$ref": "#/definitions/extract_to"
    },
    "env_add_path": {
      "$ref": "#/definitions/env_add_path"
    },
    "env_set": {
      "$ref": "#/definitions/env_set"
    },
    "innosetup": {
      "description": "如果安装程序基于 InnoSetup，则设置为 true",
      "$ref": "#/definitions/bool"
    },
    "psmodule": {
      "$ref": "#/definitions/psmodule"
    },
    "bin": {
      "$ref": "#/definitions/bin"
    },
    "shortcuts": {
      "$ref": "#/definitions/shortcuts"
    },
    "persist": {
      "$ref": "#/definitions/persist"
    },
    "pre_install": {
      "$ref": "#/definitions/pre_install"
    },
    "installer": {
      "$ref": "#/definitions/installer"
    },
    "post_install": {
      "$ref": "#/definitions/post_install"
    },
    "pre_uninstall": {
      "$ref": "#/definitions/pre_uninstall"
    },
    "uninstaller": {
      "$ref": "#/definitions/uninstaller"
    },
    "post_uninstall": {
      "$ref": "#/definitions/post_uninstall"
    },
    "checkver": {
      "$ref": "#/definitions/checkver"
    },
    "autoupdate": {
      "title": "自动更新",
      "markdownDescription": "它将通过 [Github Actions](https://github.com/abgox/abyss/blob/main/.github/workflows/excavator.yml) 去自动更新清单\n - Scoop 允许使用 `scoop install AppName@1.2.3` 安装特定版本\n - 但前提是，清单文件中 `autoupdate` 的所有 `url` 只能包含以下 [版本变量](https://github.com/ScoopInstaller/Scoop/wiki/App-Manifest-Autoupdate#version-variables)\n    - `$version`\n    - `$majorVersion`,`$minorVersion`,`$patchVersion`,`$buildVersion`,`$preReleaseVersion`\n    - `$dotVersion`,`$dashVersion`,`$underscoreVersion`,`$cleanVersion`\n    - `$matchHead`,`$matchTail`",
      "type": "object",
      "additionalProperties": false,
      "minProperties": 1,
      "examples": [
        {
          "url": ""
        },
        {
          "architecture": {
            "64bit": {
              "url": ""
            }
          }
        }
      ],
      "properties": {
        "architecture": {
          "type": "object",
          "title": "自动更新架构",
          "markdownDescription": "- 定义自动更新的架构\n- 架构可以用来包装差异",
          "properties": {
            "64bit": {
              "description": "64位架构",
              "$ref": "#/definitions/autoupdate_architecture"
            },
            "32bit": {
              "description": "32位架构",
              "$ref": "#/definitions/autoupdate_architecture"
            },
            "arm64": {
              "description": "arm64架构",
              "$ref": "#/definitions/autoupdate_architecture"
            }
          },
          "additionalProperties": false,
          "minProperties": 1
        },
        "notes": {
          "$ref": "#/definitions/notes"
        },
        "notes-cn": {
          "$ref": "#/definitions/notes-cn"
        },
        "url": {
          "$ref": "#/definitions/url"
        },
        "hash": {
          "$ref": "#/definitions/autoupdate_hash"
        },
        "bin": {
          "$ref": "#/definitions/bin"
        },
        "extract_dir": {
          "$ref": "#/definitions/extract_dir"
        },
        "extract_to": {
          "$ref": "#/definitions/extract_to"
        },
        "env_add_path": {
          "$ref": "#/definitions/env_add_path"
        },
        "env_set": {
          "$ref": "#/definitions/env_set"
        },
        "installer": {
          "$ref": "#/definitions/installer"
        },
        "license": {
          "$ref": "#/definitions/license"
        },
        "persist": {
          "$ref": "#/definitions/persist"
        },
        "post_install": {
          "$ref": "#/definitions/post_install"
        },
        "psmodule": {
          "$ref": "#/definitions/psmodule"
        },
        "shortcuts": {
          "$ref": "#/definitions/shortcuts"
        }
      }
    }
  },
  "allOf": [
    {
      "$comment": "如果存在 license，但不存在 url 或 architecture 就触发警告",
      "if": {
        "required": ["license"],
        "not": {
          "anyOf": [
            {
              "required": ["url"]
            },
            {
              "required": ["architecture"]
            }
          ]
        }
      },
      "then": {
        "not": {
          "anyOf": [
            {
              "not": {
                "required": ["url"]
              }
            },
            {
              "not": {
                "required": ["architecture"]
              }
            }
          ]
        },
        "errorMessage": "缺少 url 或 architecture 属性"
      }
    },
    {
      "$comment": "如果存在 url，则需要 hash，且不能在 architecture 中继续定义 url",
      "if": {
        "required": ["url"]
      },
      "then": {
        "allOf": [
          {
            "required": ["hash"]
          },
          {
            "properties": {
              "architecture": {
                "properties": {
                  "64bit": {
                    "allOf": [
                      {
                        "not": {
                          "required": ["url"]
                        },
                        "errorMessage": "architecture.64bit.url 和顶层的 url 冲突，你只能选择其中一种方式"
                      },
                      {
                        "not": {
                          "required": ["hash"]
                        },
                        "errorMessage": "当存在顶层 url 时，禁止定义 architecture.64bit.hash"
                      }
                    ]
                  }
                }
              }
            }
          },
          {
            "properties": {
              "architecture": {
                "properties": {
                  "32bit": {
                    "allOf": [
                      {
                        "not": {
                          "required": ["url"]
                        },
                        "errorMessage": "architecture.32bit.url 和顶层的 url 冲突，你只能选择其中一种方式"
                      },
                      {
                        "not": {
                          "required": ["hash"]
                        },
                        "errorMessage": "当存在顶层 url 时，禁止定义 architecture.32bit.hash"
                      }
                    ]
                  }
                }
              }
            }
          },
          {
            "properties": {
              "architecture": {
                "properties": {
                  "arm64": {
                    "allOf": [
                      {
                        "not": {
                          "required": ["url"]
                        },
                        "errorMessage": "architecture.arm64.url 和顶层的 url 冲突，你只能选择其中一种方式"
                      },
                      {
                        "not": {
                          "required": ["hash"]
                        },
                        "errorMessage": "当存在顶层 url 时，禁止定义 architecture.arm64.hash"
                      }
                    ]
                  }
                }
              }
            }
          }
        ]
      },
      "else": {
        "if": {
          "required": ["architecture"]
        },
        "then": {
          "allOf": [
            {
              "properties": {
                "architecture": {
                  "properties": {
                    "64bit": {
                      "required": ["url"]
                    }
                  }
                }
              }
            },
            {
              "properties": {
                "architecture": {
                  "properties": {
                    "32bit": {
                      "required": ["url"]
                    }
                  }
                }
              }
            },
            {
              "properties": {
                "architecture": {
                  "properties": {
                    "arm64": {
                      "required": ["url"]
                    }
                  }
                }
              }
            }
          ]
        },
        "else": {
          "if": {
            "required": ["license"]
          },
          "then": {
            "errorMessages": "缺少属性 url 或 architecture"
          }
        }
      }
    },
    {
      "$comment": "如果存在 url，当 url 是字符串时，hash 必须是字符串，当 url 是数组时，hash 必须是数组",
      "allOf": [
        {
          "if": {
            "required": ["url"]
          },
          "then": {
            "if": {
              "properties": {
                "url": {
                  "type": "string"
                }
              }
            },
            "then": {
              "properties": {
                "hash": {
                  "type": "string",
                  "minLength": 1,
                  "errorMessage": "当 url 是字符串 (string) 时，hash 也必须是一个字符串 (string)"
                }
              }
            },
            "else": {
              "if": {
                "properties": {
                  "url": {
                    "type": "array"
                  }
                }
              },
              "then": {
                "properties": {
                  "hash": {
                    "type": "array",
                    "items": {
                      "$ref": "#/definitions/hash"
                    },
                    "examples": [[]],
                    "minItems": 1,
                    "errorMessage": "当 url 是数组 (array) 时，hash 也必须是一个数组 (array)"
                  }
                }
              }
            }
          },
          "else": {
            "allOf": [
              {
                "properties": {
                  "hash": {
                    "not": true,
                    "errorMessage": "当不存在 url 时，禁止定义 hash"
                  }
                }
              }
            ]
          }
        },
        {
          "if": {
            "required": ["architecture"],
            "not": {
              "required": ["url"]
            }
          },
          "then": {
            "allOf": [
              {
                "if": {
                  "properties": {
                    "architecture": {
                      "properties": {
                        "64bit": {
                          "properties": {
                            "url": {
                              "type": "string"
                            }
                          }
                        }
                      }
                    }
                  }
                },
                "then": {
                  "properties": {
                    "architecture": {
                      "properties": {
                        "64bit": {
                          "required": ["hash"],
                          "properties": {
                            "hash": {
                              "type": "string",
                              "minLength": 1,
                              "errorMessage": "当 architecture.64bit.url 是字符串 (string) 时，architecture.64bit.hash 也必须是一个字符串 (string)"
                            }
                          }
                        }
                      }
                    }
                  }
                },
                "else": {
                  "if": {
                    "properties": {
                      "architecture": {
                        "properties": {
                          "64bit": {
                            "properties": {
                              "url": {
                                "type": "array"
                              }
                            }
                          }
                        }
                      }
                    }
                  },
                  "then": {
                    "properties": {
                      "architecture": {
                        "properties": {
                          "64bit": {
                            "required": ["hash"],
                            "properties": {
                              "hash": {
                                "type": "array",
                                "items": {
                                  "type": "string",
                                  "minLength": 1
                                },
                                "minItems": 1,
                                "errorMessage": "当 architecture.64bit.url 是数组 (array) 时，architecture.64bit.hash 也必须是一个数组 (array)"
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              },
              {
                "if": {
                  "properties": {
                    "architecture": {
                      "properties": {
                        "32bit": {
                          "properties": {
                            "url": {
                              "type": "string"
                            }
                          }
                        }
                      }
                    }
                  }
                },
                "then": {
                  "properties": {
                    "architecture": {
                      "properties": {
                        "32bit": {
                          "required": ["hash"],
                          "properties": {
                            "hash": {
                              "type": "string",
                              "minLength": 1,
                              "errorMessage": "当 architecture.32bit.url 是字符串 (string) 时，architecture.32bit.hash 也必须是一个字符串 (string)"
                            }
                          }
                        }
                      }
                    }
                  }
                },
                "else": {
                  "if": {
                    "properties": {
                      "architecture": {
                        "properties": {
                          "32bit": {
                            "properties": {
                              "url": {
                                "type": "array"
                              }
                            }
                          }
                        }
                      }
                    }
                  },
                  "then": {
                    "properties": {
                      "architecture": {
                        "properties": {
                          "32bit": {
                            "required": ["hash"],
                            "properties": {
                              "hash": {
                                "type": "array",
                                "items": {
                                  "type": "string",
                                  "minLength": 1
                                },
                                "minItems": 1,
                                "errorMessage": "当 architecture.32bit.url 是数组 (array) 时，architecture.32bit.hash 也必须是一个数组 (array)"
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              },
              {
                "if": {
                  "properties": {
                    "architecture": {
                      "properties": {
                        "arm64": {
                          "properties": {
                            "url": {
                              "type": "string"
                            }
                          }
                        }
                      }
                    }
                  }
                },
                "then": {
                  "properties": {
                    "architecture": {
                      "properties": {
                        "arm64": {
                          "required": ["hash"],
                          "properties": {
                            "hash": {
                              "type": "string",
                              "minLength": 1,
                              "errorMessage": "当 architecture.arm64.url 是字符串 (string) 时，architecture.arm64.hash 也必须是一个字符串 (string)"
                            }
                          }
                        }
                      }
                    }
                  }
                },
                "else": {
                  "if": {
                    "properties": {
                      "architecture": {
                        "properties": {
                          "arm64": {
                            "properties": {
                              "url": {
                                "type": "array"
                              }
                            }
                          }
                        }
                      }
                    }
                  },
                  "then": {
                    "properties": {
                      "architecture": {
                        "properties": {
                          "arm64": {
                            "required": ["hash"],
                            "properties": {
                              "hash": {
                                "type": "array",
                                "items": {
                                  "type": "string",
                                  "minLength": 1
                                },
                                "minItems": 1,
                                "errorMessage": "当 architecture.arm64.url 是数组 (array) 时，architecture.arm64.hash 也必须是一个数组 (array)"
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            ]
          },
          "else": {
            "if": {
              "required": ["architecture"],
              "anyOf": [
                {
                  "properties": {
                    "architecture": {
                      "required": ["64bit"],
                      "properties": {
                        "64bit": {
                          "required": ["url"]
                        }
                      }
                    }
                  }
                },
                {
                  "properties": {
                    "architecture": {
                      "required": ["32bit"],
                      "properties": {
                        "32bit": {
                          "required": ["url"]
                        }
                      }
                    }
                  }
                },
                {
                  "properties": {
                    "architecture": {
                      "required": ["arm64"],
                      "properties": {
                        "arm64": {
                          "required": ["url"]
                        }
                      }
                    }
                  }
                }
              ]
            },
            "else": {
              "if": {
                "required": ["license"]
              },
              "then": {
                "required": ["url"]
              }
            }
          }
        }
      ]
    },
    {
      "$comment": "如果 url 是 github releases 链接，则需要指定 hash 模式为 github",
      "properties": {
        "autoupdate": {
          "type": "object",
          "if": {
            "properties": {
              "architecture": {
                "type": "object",
                "patternProperties": {
                  "^(64bit|arm64|32bit)$": {
                    "properties": {
                      "url": {
                        "oneOf": [
                          {
                            "type": "string",
                            "pattern": "^https://github\\.com/.+?/releases/download/"
                          },
                          {
                            "type": "array",
                            "items": {
                              "type": "string",
                              "pattern": "^https://github\\.com/.+?/releases/download/"
                            }
                          }
                        ]
                      }
                    }
                  }
                }
              }
            }
          },
          "then": {
            "required": ["hash"],
            "properties": {
              "hash": {
                "required": ["mode"],
                "properties": {
                  "mode": {
                    "const": "github"
                  }
                }
              }
            }
          }
        }
      }
    }
  ]
}
